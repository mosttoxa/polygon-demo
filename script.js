// script.js
import { stats, updateStats, tryUnlockDice } from "./playerStats.js";
import { currentDice, selectedDice, rollDice } from "./dice.js";
import { renderField, logEvent } from "./fieldRenderer.js";
import { resolveCombat } from "./combat.js";
import { handleRightClick } from "./rightClickHandler.js";
import { createHandleCellClick } from "./eventHandlers.js";
import { initGame } from "./initGame.js";
import { showQuestionIfNeeded } from "./popupQuestion.js";
import { moveMonstersHunt } from "./monstersAI.js";

// üîé –Ω–æ–≤–∏–π —Å–∫–∞–Ω–µ—Ä
import {
  scanOnTurnStart,
  scanOnPlayerMove,
  tryRevealCell,
  getScanBudgetLeft,
  toggleRevealAll,
  isRevealAll,
} from "./scan.js";

document.addEventListener("DOMContentLoaded", () => {
  const gameField = document.getElementById("game-field");
  const logContainer = document.getElementById("combat-log");

  const numRows = 13;
  const numCols = 13;

  // –°—Ç–∞–Ω –≥—Ä–∏
  let diceUsed = false;
  let currentRollCount = Math.max(1, Math.min(6, stats.maxDice || 1));
  const turnRef = { value: 1 };
  window.turnRef = turnRef;

  const playerPositionRef = { value: Math.floor((numRows * numCols) / 2) };
  window.playerPositionRef = playerPositionRef;

  const monstersRef = { value: [] };
  const bonusCells = new Set();
  const yellowCells = new Set();
  const eventCells = new Map();
  const portalCells = new Set();

  // –°—Ç–≤–æ—Ä—é—î–º–æ DOM-–∫–ª—ñ—Ç–∏–Ω–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑
  for (let i = 0; i < numRows * numCols; i++) {
    const cell = document.createElement("div");
    cell.dataset.index = i;
    cell.classList.add("cell");
    gameField.appendChild(cell);
  }

  // –°—Ç–∞—Ä—Ç/—Ä–µ—Å—Ç–∞—Ä—Ç –≥—Ä–∏
  const restartGame = () => {
    initGame({
      gameField,
      numRows,
      numCols,
      playerPositionRef,
      monstersRef,
      bonusCells,
      yellowCells,
      eventCells,
      portalCells,
      turnRef
    }, logContainer);

    // –°–∫–∞–Ω–µ—Ä: –ø–æ—á–∞—Ç–æ–∫ —Ö–æ–¥—É + –ø—Ä–æ–º–∞–ª—å–æ–≤–∫–∞
    scanOnTurnStart({ playerPosition: playerPositionRef.value });
    scanOnPlayerMove({
      playerPosition: playerPositionRef.value,
      numRows, numCols,
      gameFieldElement: gameField,
      monstersRef, bonusCells, yellowCells, eventCells, portalCells
    });

    // –ö–∏–¥–æ–∫ –¥–∂–µ—Ä–µ–ª –Ω–∞ –ø–µ—Ä—à–∏–π —Ö—ñ–¥ —É–∂–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ initGame ‚Üí –æ–Ω–æ–≤–∏–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
    currentRollCount = Math.max(1, Math.min(6, stats.maxDice || 1));
    updateStats(turnRef.value);
  };

  // –ü–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫
  restartGame();

  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –∑ –ª–æ–≥—ñ–∫–æ—é —Ä—É—Ö—É (—ñ–∑ eventHandlers.js)
  const handleCellClick = createHandleCellClick({
    numCols,
    stats,
    monstersRef,
    bonusCells,
    yellowCells,
    eventCells,
    portalCells,
    playerPositionRef,
    renderContext: {
      numRows,
      numCols,
      gameFieldElement: gameField
    },
    logContainer
  });

  // –ù–∞–≤—ñ—à—É—î–º–æ —Å–ª—É—Ö–∞—á—ñ –Ω–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∏
  gameField.querySelectorAll(".cell").forEach(cell => {
    const i = Number(cell.dataset.index);

    cell.addEventListener("click", (e) => {
      // Shift+–∫–ª—ñ–∫ = —Å–ø—Ä–æ–±–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Å—É—Å—ñ–¥–Ω—é –∫–ª—ñ—Ç–∏–Ω–∫—É —Å–∫–∞–Ω–µ—Ä–æ–º (–±–µ–∑ —Ä—É—Ö—É)
      if (e.shiftKey) {
        tryRevealCell(i, {
          playerPosition: playerPositionRef.value,
          numRows, numCols,
          gameFieldElement: gameField,
          monstersRef, bonusCells, yellowCells, eventCells, portalCells,
          logContainer
        });
        return;
      }

      // –ó–≤–∏—á–∞–π–Ω–∏–π –∫–ª—ñ–∫ = —Ä—É—Ö (—è–∫ —ñ –±—É–ª–æ). –ü—ñ—Å–ª—è —Ä—É—Ö—É ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ —Å–∫–∞–Ω–µ—Ä.
      handleCellClick(i);

      scanOnPlayerMove({
        playerPosition: playerPositionRef.value,
        numRows, numCols,
        gameFieldElement: gameField,
        monstersRef, bonusCells, yellowCells, eventCells, portalCells
      });
    });

    cell.addEventListener("contextmenu", (e) => handleRightClick(e, i, monstersRef.value));
  });

  // –†–æ–∑–ø–æ–¥—ñ–ª –∑–Ω–∞—á–µ–Ω—å –¥–∂–µ—Ä–µ–ª –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
  document.addEventListener("keydown", e => {
    const map = { m: "move", a: "attack", e: "energy" };
    const target = map[e.key];
    if (!target) return;

    const idx = selectedDice.findIndex(v => !v);
    if (idx === -1) return; // —É—Å—ñ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ

    const value = currentDice[idx];

    if (target === "energy") {
      stats.energy = Math.min(stats.energyMax, stats.energy + value);
      tryUnlockDice(logContainer); // –º–æ–∂–µ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞—Ç–∏ 2–π/3–π... —Å–ª–æ—Ç
    } else {
      stats[target] += value;
    }

    selectedDice[idx] = true;
    const dieEl = document.getElementById(`dice${idx + 1}`);
    if (dieEl) dieEl.classList.add("selected-dice");

    const usedCount = selectedDice.filter(Boolean).length;
    if (usedCount >= currentRollCount) {
      diceUsed = true;
    }

    updateStats(turnRef.value);
  });

  document.addEventListener("keydown", e => {
  if (e.key.toLowerCase() === "v") {
    toggleRevealAll();

    // –º–∏—Ç—Ç—î–≤–æ –ø–µ—Ä–µ—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤–∏–¥–∏–º—ñ—Å—Ç—å —ñ –ø–µ—Ä–µ–º–∞–ª—é–≤–∞—Ç–∏
    scanOnPlayerMove({
      playerPosition: playerPositionRef.value,
      numRows, numCols,
      gameFieldElement: gameField,
      monstersRef, bonusCells, yellowCells, eventCells, portalCells
    });

    // –Ω–µ–≤–µ–ª–∏—á–∫–∏–π –ª–æ–≥, —â–æ–± –±—É–ª–æ –≤–∏–¥–Ω–æ —Å—Ç–∞–Ω
    const mode = isRevealAll() ? "–£–í–Ü–ú–ö–ù–ï–ù–û" : "–í–ò–ú–ö–ù–ï–ù–û";
    logEvent(`[DEBUG] –ü–æ–≤–Ω–∞ –≤–∏–¥–∏–º—ñ—Å—Ç—å: ${mode}`, logContainer);
  }
});


  // –ö–Ω–æ–ø–∫–∞: –∫–∏–Ω—É—Ç–∏ –¥–∂–µ—Ä–µ–ª–∞
  document.getElementById("roll-button").addEventListener("click", () => {
    rollDice(logContainer);
    currentRollCount = Math.max(1, Math.min(6, stats.maxDice || 1));
  });

  // –õ–æ–≥—ñ–∫–∞ –∫—ñ–Ω—Ü—è —Ö–æ–¥—É
  function endTurn() {
    const usedCount = selectedDice.filter(Boolean).length;
    if (usedCount < currentRollCount) {
      return alert(`–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π ${currentRollCount} –∑–Ω–∞—á–µ–Ω–Ω—è(–Ω—å) –¥–∂–µ—Ä–µ–ª –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è–º —Ö–æ–¥—É.`);
    }

    // –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ö—ñ–¥
    turnRef.value++;
    const tc = document.getElementById("turn-counter");
    if (tc) tc.textContent = turnRef.value;

    // –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –≤–∏–±—Ä–∞–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
    diceUsed = false;
    selectedDice.fill(false);
    document.querySelectorAll(".selected-dice").forEach(el => el.classList.remove("selected-dice"));

    // –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ –ø–µ–≤–Ω–∏—Ö —Ö–æ–¥–∞—Ö
    showQuestionIfNeeded({
      turnRef,
      stats,
      logContainer,
      playerPositionRef,
      numRows,
      numCols,
      onUpdate: () => {
        // –û–Ω–æ–≤–ª—é—î–º–æ UI —ñ –≤–∏–¥–∏–º—ñ—Å—Ç—å –±–µ–∑ –∑–º—ñ–Ω–∏ –ø–æ–∑–∏—Ü—ñ—ó
        updateStats(turnRef.value);
        scanOnPlayerMove({
          playerPosition: playerPositionRef.value,
          numRows, numCols,
          gameFieldElement: gameField,
          monstersRef, bonusCells, yellowCells, eventCells, portalCells
        });
      },
      afterPopup: () => {
        // –ü–æ—á–∞—Ç–æ–∫ –Ω–æ–≤–æ–≥–æ —Ö–æ–¥—É –¥–ª—è —Å–∫–∞–Ω–µ—Ä–∞ (—Å–∫–∏–¥–∞—î–º–æ –±—é–¥–∂–µ—Ç)
        scanOnTurnStart({ playerPosition: playerPositionRef.value });

        // –†—É—Ö –º–æ–Ω—Å—Ç—Ä—ñ–≤
        moveMonstersHunt({ monstersRef, numRows, numCols, playerPositionRef });

        // --- –∞–≤—Ç–æ–ø—Ä–æ–∫–∞—á–∫–∞ –º–æ–Ω—Å—Ç—Ä—ñ–≤ ---
const TURN = turnRef.value;
// –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–∂–Ω–∞ –∑–≥–æ–¥–æ–º –≤–∏–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ—ñ–≥:
const GROW_HP_EVERY = 4;    // –∫–æ–∂–Ω—ñ 4 —Ö–æ–¥–∏
const GROW_DMG_EVERY = 6;   // –∫–æ–∂–Ω—ñ 6 —Ö–æ–¥—ñ–≤
const HP_DELTA = 1;
const DMG_DELTA = 1;

let grew = false;
if (TURN % GROW_HP_EVERY === 0) {
  for (const m of monstersRef.value) m.hp += HP_DELTA;
  grew = true;
}
if (TURN % GROW_DMG_EVERY === 0) {
  for (const m of monstersRef.value) m.damage += DMG_DELTA;
  grew = true;
}
if (grew) {
  // –¥–æ–¥–∞–π –ª–æ–≥, —è–∫—â–æ —î –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  const line = document.createElement("div");
  line.textContent = `–ú–æ–Ω—Å—Ç—Ä–∏ –ø–æ—Å–∏–ª–∏–ª–∏—Å—è: +${TURN % GROW_HP_EVERY === 0 ? HP_DELTA + " HP " : ""}${TURN % GROW_DMG_EVERY === 0 ? "+ " + DMG_DELTA + " DMG" : ""}`.trim();
  const logContainer = document.getElementById("combat-log");
  if (logContainer) {
    logContainer.appendChild(line);
    logContainer.scrollTop = logContainer.scrollHeight;
  }
}


        // –ë—ñ–π –ø—ñ—Å–ª—è —Ä—É—Ö—É –º–æ–Ω—Å—Ç—Ä—ñ–≤
        resolveCombat({
          playerPosition: playerPositionRef.value,
          monstersRef,
          stats,
          logContainer
        });

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞–Ω–µ—Ä—É —ñ —Ä–µ–Ω–¥–µ—Ä–∞ (–ø–æ–∑–∏—Ü—ñ—è –º–æ–≥–ª–∞ –∑–º—ñ–Ω–∏—Ç–∏—Å—è –ø—ñ–¥ —á–∞—Å –ø–æ–¥—ñ–π)
        scanOnPlayerMove({
          playerPosition: playerPositionRef.value,
          numRows, numCols,
          gameFieldElement: gameField,
          monstersRef, bonusCells, yellowCells, eventCells, portalCells
        });

        // –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –¥–∂–µ—Ä–µ–ª–∞ –Ω–∞ –Ω–æ–≤–∏–π —Ö—ñ–¥
        rollDice(logContainer);
        currentRollCount = Math.max(1, Math.min(6, stats.maxDice || 1));

        // –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç–∏
        updateStats(turnRef.value);
      }
    });
  }

  // –ö–Ω–æ–ø–∫–∞: –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ö—ñ–¥
  document.getElementById("end-turn-button").addEventListener("click", () => {
    endTurn();
  });

  // (–î–æ–¥–∞—Ç–∫–æ–≤–æ, –æ–ø—Ü—ñ–π–Ω–æ) ‚Äî –º–æ–∂–Ω–∞ –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –ª—ñ–º—ñ—Ç —Å–∫–∞–Ω—É –≤ –∂—É—Ä–Ω–∞–ª—ñ:
  // import("./fieldRenderer.js").then(m => m.logEvent(`[SCAN] –î–æ—Å—Ç—É–ø–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ–≤: ${getScanBudgetLeft()}`, logContainer));
});
